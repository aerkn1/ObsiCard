name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests
      run: npm test
    
    - name: Build plugin
      run: npm run build
    
    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Verify version matches manifest
      run: |
        MANIFEST_VERSION=$(cat manifest.json | grep '"version"' | cut -d'"' -f4)
        if [ "$MANIFEST_VERSION" != "${{ steps.get_version.outputs.VERSION }}" ]; then
          echo "Version mismatch: tag is ${{ steps.get_version.outputs.VERSION }} but manifest.json has $MANIFEST_VERSION"
          exit 1
        fi
    
    - name: Create release package
      run: |
        mkdir obsicard
        cp main.js manifest.json obsicard/
        [ -f styles.css ] && cp styles.css obsicard/ || true
        zip -r obsicard-${{ steps.get_version.outputs.VERSION }}.zip obsicard/
    
    - name: Extract changelog for this version
      id: changelog
      run: |
        VERSION="${{ steps.get_version.outputs.VERSION }}"
        CHANGELOG=$(awk "/## \[$VERSION\]/,/## \[/" CHANGELOG.md | sed '1d;$d')
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          obsicard-${{ steps.get_version.outputs.VERSION }}.zip
          main.js
          manifest.json
        body: ${{ steps.changelog.outputs.CHANGELOG }}
        draft: false
        prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'alpha') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Update release branch
      if: "!contains(github.ref, 'beta') && !contains(github.ref, 'alpha')"
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        git checkout -b release
        git push origin release --force

